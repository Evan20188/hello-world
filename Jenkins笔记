持续集成(Continuous Integration, CI):
    指的是，频繁地将代码集成到主干。将软件个人研发的部分向软件整体部分交付，频繁地进行集成以便更快地发现其中的错误。
    持续集成有两个好处：一是快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误；二是防止分支大幅偏离主干，如不经常集成，主干又在不断更新，会
    导致以后集成的难度变大，甚至难以集成。
    
    持续集成并不能消除 Bug，而是让它们非常容易发现和改正。持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干
    之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。
    
 持续交付(Continuous delivery)：
    指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。
    持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的【类生产环境】（production-like envirionments）中。持续交付优先于整个产品
    生命周期的软件部署，建立在高水平自动化持续集成之上。
    持续交付可以看作是持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。
    
 持续部署（Continuous deployment）:
    是持续交付的下一步，指的是代码通过评审后，自动部署到生产环境。
    持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。
    持续部署的前提是能自动化完成测试、构建、部署等步骤。
    
    build --> Unit Tests --> Deploy to stage --> Acceptance Tests --> Deploy to production
    
  
 总的来说，持续集成、持续交付、持续部署提供了一个优秀的DevOps环境。对于整个开发团队来说，能很大地提升开发效率。
 
 
 
Jenkins概念
    Jenkins是一个开源的、可扩展的持续集成、交付、部署（软件/代码的编译、打包、部署）的基于web界面的平台。允许持续集成和持续交付项目，无论用的是什么
    平台，可以处理任何类型的构建或持续集成。
    
    Jenkins特性：
       开源的Java语言开发持续集成工具，支持持续集成，持续部署；
       易于安装部署配置：可通过yum安装，或下载war包以及通过docker容器等快速实现安装部署，可方便web界面配置管理；
       消息通知及测试报告：集成RSS/E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知，生成JUnit/TestNG测试报告；
       分布式构建：支持Jenkins能够让多台计算机一起构建/测试
       文件识别：Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等；
       丰富的插件支持：支持扩展插件，可以开发适合自己团队使用的工具，如git,svn,maven,docker等





















