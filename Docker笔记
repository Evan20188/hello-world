Docker架构：
1.镜像（Image）：相当于一个root文件系统，是用于创建Docker容器的模板。
2.容器（Container）：镜像和容器的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，是独立运行的一个或一组应用，容器是镜像运行时的实体。
  容器可以被创建、启动、停止、删除、暂停等。
3.仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。

Docker使用客户端-服务端（C/S）架构模式，使用远程API来管理和创建Docker容器。
Docker容器通过Docker镜像来创建。

Docker客户端（Client）：通过命令行或其他工具使用Docker SDK  与 Docker的守护进程通信。
Docker主机（Host）：一个物理或者虚拟的机器用于执行Docker守护进程和容器。
Docker仓库（Registry）：用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub提供了庞大的镜像集合供使用。一个Docker Registry中可以包含多个仓库；
    每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。
    通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用与对应该软件的各个版本。我们可以通过<仓库名>:<标签>的格式来指定具体是这个软件那个版本的
    镜像。如果不给出标签，将以latest作为默认标签。
Docker Machine：是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、Digital Ocean、Microsoft Azure。   
 




